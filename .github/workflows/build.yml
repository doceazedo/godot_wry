on:
  push:
    branches: main
    paths-ignore:
      - "docs/**"
  pull_request:
    types: [opened, synchronize, reopened]
    branches: main

name: 🤖 GDExtension

jobs:
  build:
    name: 🏗️ Build / ${{ matrix.platform.os-name }}
    strategy:
      matrix:
        platform:
          - os-name: 🐧 Linux (64-bit)
            runs-on: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os-name: 🍎 macOS (Universal)
            runs-on: macos-latest
            target: universal-apple-darwin
          - os-name: 🪟 Windows (64-bit)
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Linux dependencies
        if: ${{ matrix.platform.runs-on == 'ubuntu-latest' }}
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libsoup-3.0-dev libwebkit2gtk-4.1-dev build-essential curl wget file libssl-dev libayatana-appindicator3-dev librsvg2-dev libjavascriptcoregtk-4.1-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        if: ${{ matrix.platform.runs-on != 'windows-latest' }} # Windows uses the system Rust
        with:
          targets: ${{ matrix.platform.target == 'universal-apple-darwin' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform.target }}

      - name: Setup MSVC
        if: ${{ matrix.platform.runs-on == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Add advapi32 lib
        if: ${{ matrix.platform.runs-on == 'windows-latest' }}
        run: echo "RUSTFLAGS=-L C:/Program Files (x86)/Windows Kits/10/Lib/10.0.*/um/x64 -l advapi32" >> $GITHUB_ENV
        shell: bash

      - name: Install Just
        uses: extractions/setup-just@v1

      - name: Build binaries
        run: just ${{ matrix.platform.target == 'universal-apple-darwin' && 'build-macos-universal' || 'build' }}

      - name: Code sign and notarize library
        if: ${{ matrix.platform.runs-on == 'macos-latest' }}
        env:
          APPLE_CERT_BASE64: ${{ secrets.APPLE_CERT_BASE64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_DEV_ID: ${{ secrets.APPLE_DEV_ID }}
          APPLE_DEV_TEAM_ID: ${{ secrets.APPLE_DEV_TEAM_ID }}
          APPLE_DEV_PASSWORD: ${{ secrets.APPLE_DEV_PASSWORD }}
          APPLE_DEV_APP_ID: ${{ secrets.APPLE_DEV_APP_ID }}
        run: |
          brew install --cask powershell
          pwsh ./scripts/ci_sign_macos.ps1 rust/target/release/libgodot_wry.framework

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}
          path: |
            rust/target/${{ matrix.platform.target }}/release/*.dll
            rust/target/${{ matrix.platform.target }}/release/*.so
            rust/target/${{ matrix.platform.target }}/release/*.dylib
            rust/target/release/*.framework

  zip:
    name: 📦 Package
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: godot/addons/godot_wry/bin

      - name: Clean files
        run: |
          mkdir -p package/godot_wry
          mv godot/addons package/godot_wry

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: godot_wry
          path: package

  #TODO: release:
